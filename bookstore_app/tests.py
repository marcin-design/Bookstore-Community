from django.contrib.auth import get_user_model, login
from django.urls import reverse
from django.http import HttpResponse
from django.test import RequestFactory
from django.contrib.auth.models import User

from bookstore_app.forms import RegistrationForm, LoginForm
from bookstore_app.views import RegistrationView, div, LoginView, logout_view
import pytest

User = get_user_model()
# access to the user model

@pytest.mark.django_db
def test_get_registration_view():
    factory = RequestFactory()
    # tool for creating HTTP request objects
    request = factory.get(reverse('registration'))
    # creates an HTTP GET request object for the "registration" view
    # using the reverse function, which generates a URL based on the view name
    response = RegistrationView.as_view()(request)
    # simulates a RegistrationView call using as_view()
    # this returns the response that is generated by this view
    assert response.status_code == 200
    assert isinstance(response, HttpResponse)
    assert 'bookstore_app/registration.html' in [template.name for template in response.templates]
    assert isinstance(response.context_data['form'], RegistrationForm)
    # checks whether the form passed to the view context is an instance of a RegistrationForm
    # this checks whether the view prepares and passes the appropriate form to the template


@pytest.mark.django_db
def test_login_view_get():
    factory = RequestFactory()
    # tool for creating HTTP request objects
    request = factory.get(reverse('login'))
    # creates an HTTP GET request object for the "login" view
    # using the reverse function, which generates a URL based on the view name
    response = LoginView.as_view()(request)

    assert response.status_code == 200
    assert isinstance(response.context_data['form'], LoginForm)
    # checks whether the view context (response.context_data)
    # contains a form object that is an instance of the LoginForm class
    assert 'bookstore_app/login.html' in [template.name for template in response.templates]
    # checking if the login view uses a template 'bookstore_app/login.html'
    # checking this by looking at the list of templates that have been used in the response (response.templates)


@pytest.mark.django_db
def test_login_view_post_valid_form():
    factory = RequestFactory()
    # tool for creating HTTP request objects
    user = User.objects.create_user(username='testuser', password='testpassword', email='testmail@o2.pl')
    # user object in the database using the create_user method
    data = {
        'username': 'testuser',
        'password': 'testpassword',
        'email': 'testmail@o2.pl',
    }
    # data that will be sent in the login form
    request = factory.post(reverse('login'), data)
    # creates an HTTP GET request object for the "login" view
    # using the reverse function, which generates a URL based on the view name.
    response = LoginView.as_view()(request)
    # the login view is launched

    assert response.status_code == 302  # redirecting to main page
    assert response.url == reverse('main')  # checking if redirecting to main page
    assert request.user.is_authenticated  # checking if a user is logged in


@pytest.mark.django_db
def test_login_view_post_invalid_form():
    factory = RequestFactory()
    # tool for creating HTTP request objects
    data = {
        'username': 'testuser',
        'password': 'incorrectpassword',
        'email': 'testmail@o2.pl',
    }
    # data that will be sent in the login form
    request = factory.post(reverse('login'), data)
    response = LoginView.as_view()(request)

    assert response.status_code == 200  # redirecting to login page
    assert not request.user.is_authenticated  # checking if a user is logged in
    assert 'bookstore_app/login.html' in [template.name for template in response.templates]
    # checking if the login view uses a template 'bookstore_app/login.html'
    assert isinstance(response.context_data['form'], LoginForm)
    # checks whether the form passed to the view context is an instance of a LoginForm
    # this checks whether the view prepares and passes the appropriate form to the template

